@page "/learnblazor/blazorjs"
<h3>BlazorJs</h3>
@inject IJSRuntime _ijsruntime

<div class="row">
    <input type="button" class="btn btn-secondary m-2" style="width:200px;" @onclick="TestConfirmBox" value="Test Confirm Button" /> 
</div>
<div class="row">
    <input type="button" class="btn btn-success m-2" style="width:200px;" @onclick="Toastrsuccess" value="Toaster success" />
    <input type="button" class="btn btn-danger m-2" style="width:200px;" @onclick="Toastrfailure" value="Toaster failure" />
</div>
<br />
<div class="row">
    <input type="button" class="btn btn-success m-2" style="width:200px;" @onclick="SweetAlertsuccess" value="SweetAlert Success" />
    <input type="button" class="btn btn-danger m-2" style="width:200px;" @onclick="SweetAlertfailure" value="SweetAlert failure" />
    <input type="button" class="btn btn-warning m-2" style="width:200px;" @onclick="SweetAlertwarning" value="SweetAlert warning" />
</div>


<div class="row">
    @if (ConfirmResult)
    {
        <p>Confirmation has made!</p>
    }
    else
    {
        <p>Confirmation pending!</p>
    }
</div>
@code {
    private string ConfirmMessage = "Are you sure you want to click?";
    public bool ConfirmResult { get; set; }


    private async Task TestConfirmBox()
    {
        ConfirmResult = await _ijsruntime.InvokeAsync<bool>("confirm", ConfirmMessage);

    }

    private async Task Toastrsuccess()
    {
        await  _ijsruntime.ToastrSuccess("Success");
    }

    private async Task Toastrfailure()
    {
        await _ijsruntime.ToastrError("Error");
    }

    private async Task SweetAlertsuccess()
    {
        await _ijsruntime.SwalSuccess("Task completed successfully");
    }

    private async Task SweetAlertfailure()
    {
        await _ijsruntime.SwalError("Task failed!");
    }

    private async Task SweetAlertwarning()
    {
        await _ijsruntime.SwalWarning("Be carefull!");
    }
    /*
    private async Task SweetAlertsuccess()
    {
        await _ijsruntime.InvokeVoidAsync("ShowSawl", "success", "Task completed successfully");

    }

    private async Task SweetAlertfailure()
    {
        await _ijsruntime.InvokeVoidAsync("ShowSawl", "error", "Task failed!");
    }
    */
}
