@page "/product/create"
@page "/product/edit/{id:int}"
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>

    <div class="col-8">
        @if (isLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="product" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />
                @*<ValidationSummary/> *@
                <div class="form-group">
                    <label> Name</label>
                    <InputText class="form-control" @bind-Value="product.Name"></InputText>
                    <ValidationMessage For="()=>product.Name" />
                </div>
                <div class="form-group">
                    <label> Color </label>
                    <InputText class="form-control" @bind-Value="product.Color"></InputText>
                    <ValidationMessage For="()=>product.Color" />
                </div>

                <div class="form-group">
                    <label> Description </label>
                    <InputTextArea class="form-control" @bind-Value="product.Description"></InputTextArea>
                    <ValidationMessage For="()=>product.Description" />
                </div>


                <div class="row pt-3">
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="product.ShopFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Shop Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="product.CustomerFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Customer Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <label>Category</label>
                        <InputSelect @bind-Value="product.CategoryId" class="form-select">
                            <option value="0" disabled="disabled" selected>--Select Category--</option>
                            @foreach (var item in Categories)
                            {
                            <option value="@item.Id"> @item.Name</option>
                            }
                    </InputSelect>
                    <ValidationMessage For="()=>product.CategoryId" />

                </div>
            </div>

            <br />
            <div class="form-group">
                <button class="btn btn-primary">@Title</button>
                <NavLink class="btn btn-secondary" href="product">Back to Index</NavLink>
            </div>
        </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private ProductDTO product { get; set; } = new ProductDTO();
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private string Title { get; set; } = "Create";
    public bool isLoading { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
        }
    }

    private async Task LoadProduct()
    {
        isLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        if (id != 0)
        {
            //update
            Title = "Update";
            product = await _productRepository.Get(id);
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task UpsertProduct()
    {
        if (product.Id == 0)
        {
            await _productRepository.Create(product);
        }
        else
        {
            await _productRepository.Update(product);
        }

        _navigationManager.NavigateTo("product");
    }


}
