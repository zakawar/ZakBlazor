@page "/Product/price/{Id:int}"
@using Syncfusion.Blazor.Grids
@inject IProductRepository _productRepository
@inject IProductPriceRepository _productPriceRepository



<h3 class="card-title text-primary mb-3 ml-3">Product Price Management</h3>

@if (isLoading)
{
    <div class="text-center">
        <img src="/images/loading.gif">
    </div>
}
else
{
    <div class="row border p-2 mb-4">
        <div class="col-11">
            <div class="card-body">
                <h4>@product.Name</h4>
                <span>
                    Category: @product.Category.Name
                </span> <br>
                
                Description : <span>@((MarkupString)product.Description)</span>
                
            </div>
        </div>
        <div class="col-1">
            <img src="@product.ImageUrl" class="w-100">
        </div>
    </div>
    <SfGrid @ref="productpricesgrid" DataSource="@productprices" AllowFiltering="true" AllowSorting="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })" AllowPaging="true" >
        <GridEvents OnActionBegin="ActionHandler" TValue="ProductPriceDTO"></GridEvents>  
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridSortSettings AllowUnsort="false">
            <GridSortColumns>
                <GridSortColumn Field="Price" Direction="SortDirection.Ascending"></GridSortColumn>
            </GridSortColumns>
        </GridSortSettings>
        <GridEditSettings AllowAdding="true" AllowDeleting="true" ShowDeleteConfirmDialog="true" AllowEditing="true"></GridEditSettings>
        <GridPageSettings PageSize="5" PageCount="5" PageSizes="true"/>
        <GridColumns>
            <GridColumn IsPrimaryKey="true" AllowEditing="false" Field=@nameof(ProductPriceDTO.Id) HeaderText="ID" TextAlign="TextAlign.Center"  Width="120"></GridColumn>
            <GridColumn Field=@nameof(ProductPriceDTO.Size) HeaderText="Size" TextAlign="TextAlign.Center" Width="150">
                <EditTemplate>
                    <Syncfusion.Blazor.DropDowns.SfDropDownList DataSource="SizeList" TItem = "string" TValue="string"
                    @bind-Value="((context as ProductPriceDTO).Size)">

                    </Syncfusion.Blazor.DropDowns.SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(ProductPriceDTO.Price) HeaderText="Price" Format="C2" TextAlign="TextAlign.Center"  Width="130"></GridColumn>
            <GridColumn HeaderText="Manage Records" Width="150">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat" })"></GridCommandColumn>
                </GridCommandColumns>
         </GridColumn>   
        </GridColumns>
    </SfGrid>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private ProductDTO product { get; set; } = new();
    private IEnumerable<ProductPriceDTO> productprices { get; set; } = new List<ProductPriceDTO>();
    private bool isLoading { get; set; } = true;
    public SfGrid<ProductPriceDTO> productpricesgrid;

    IEnumerable<String> SizeList = new List<String>()
    {
        "Small","Medium","Large","8oz","16oz","24oz"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            product = await _productRepository.Get(Id);
            productprices = await _productPriceRepository.GetAll(Id);
            isLoading = false;
            StateHasChanged();
        }
    }
    public async void ActionHandler(ActionEventArgs<ProductPriceDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            args.Data.ProductId = Id;
            if (args.Action == "Add")
            {
                await _productPriceRepository.Create(args.Data);
                productprices = await _productPriceRepository.GetAll(Id);
                await productpricesgrid.Refresh();
            }

            if (args.Action == "Edit")
            {
                await _productPriceRepository.Update(args.Data);
                productprices = await _productPriceRepository.GetAll(Id);
                await productpricesgrid.Refresh();
            }
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
             await _productPriceRepository.Delete(args.Data.Id);
             productprices = await _productPriceRepository.GetAll(Id);
             await productpricesgrid.Refresh();
        }
    }
}
